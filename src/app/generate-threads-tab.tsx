"use client";

import { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { ScrollArea } from "@/components/ui/scroll-area";

const mockGeneratedPosts = [
  "Post 1 content goes here. This is a sample post generated by the AI.",
  "Post 2 content. Another unique and engaging Threads post variation.",
  "Post 3: This is a third example of a generated Threads post.",
  "Post 4 - Content for another thread.",
  "Post 5 - A sample generated post.",
];

const mockRecentKeywords = ["example", "sample", "ai", "threads", "social media"];

export default function GenerateThreadsTab() {
  const [threadIdea, setThreadIdea] = useState("");
  const [includeImages, setIncludeImages] = useState(false);
  const [generatedPosts, setGeneratedPosts] = useState(mockGeneratedPosts);
  const [selectedPost, setSelectedPost] = useState<string | null>(null);

  const handleGeneratePosts = () => {
    // TODO: Implement AI generation logic here
    console.log("Generating posts for idea:", threadIdea);
    console.log("Include images:", includeImages);
  };

  const handleClearAll = () => {
    setThreadIdea("");
    setGeneratedPosts([]);
    setSelectedPost(null);
  };

  const handlePostSelect = (post: string) => {
    setSelectedPost(post === selectedPost ? null : post);
  };

  const handleRegenerate = (post: string) => {
    // TODO: Implement regenerate logic here
    console.log("Regenerating post:", post);
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Left Side: Controls */}
      <div className="space-y-6">
        <Card className="shadow-md bg-card">
          <CardHeader>
            <CardTitle className="text-dadada">New Thread Idea</CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              placeholder="Type your idea here..."
              className="bg-input border-input text-dadada rounded-md shadow-none focus-visible:ring-ring focus-visible:ring-offset-background"
              value={threadIdea}
              onChange={(e) => setThreadIdea(e.target.value)}
            />
            <p className="text-muted-foreground text-sm mt-2">Character Count: {threadIdea.length}</p>
            <div className="flex justify-between mt-4">
              <Button variant="primary" onClick={handleGeneratePosts}>
                Generate
              </Button>
              <Button variant="secondary" onClick={handleClearAll}>
                Clear All
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-md bg-card">
          <CardHeader>
            <CardTitle className="text-dadada">Include Images</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <p className="text-dadada">Enable image suggestions with the posts</p>
              <Switch checked={includeImages} onCheckedChange={setIncludeImages} id="include-images" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Right Side: Generated Posts */}
      <div className="space-y-6">
        <Card className="shadow-md bg-card">
          <CardHeader>
            <CardTitle className="text-dadada">Generated Posts</CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <ScrollArea className="h-[400px] px-4">
              {generatedPosts.map((post, index) => (
                <div
                  key={index}
                  className={`p-4 rounded-md mb-2 cursor-pointer ${
                    selectedPost === post ? "bg-muted" : "bg-card"
                  }`}
                  onClick={() => handlePostSelect(post)}
                >
                  <p className="text-dadada">{post}</p>
                  <div className="flex justify-end mt-2">
                    <Button variant="ghost" size="sm">
                      Use
                    </Button>
                    <Button variant="ghost" size="sm" onClick={() => handleRegenerate(post)}>
                      Regenerate
                    </Button>
                  </div>
                </div>
              ))}
            </ScrollArea>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
